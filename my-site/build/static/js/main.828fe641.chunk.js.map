{"version":3,"sources":["Menu/NavItem.jsx","components/NavBar.jsx","components/Home.jsx","components/Projects.jsx","components/About.jsx","components/Error.jsx","App.jsx","serviceWorker.js","index.js"],"names":["NavItem","props","className","to","page","text","NavBar","React","Component","Home","Projects","About","Error","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iUAWeA,MARf,SAAiBC,GACf,OACD,yBAAKC,UAAU,eACd,kBAAC,IAAD,CAASC,GAAI,IAAMF,EAAMG,MAAOH,EAAMI,QCUzBC,E,iLAVb,OACC,yBAAKJ,UAAU,UACd,kBAAC,EAAD,CAASE,KAAK,GAAGC,KAAK,SACtB,kBAAC,EAAD,CAASD,KAAK,WAAWC,KAAK,aAC9B,kBAAC,EAAD,CAASD,KAAK,QAAQC,KAAK,e,GANVE,IAAMC,WCmBZC,E,iLAdb,OACC,yBAAKP,UAAU,sBACd,4BAAQA,UAAU,kBACjB,uCAED,+BAGA,kBAAC,EAAD,W,GAVeK,IAAMC,WCeVE,E,iLAdb,OACC,yBAAKR,UAAU,sBACd,4BAAQA,UAAU,OACjB,yCAED,kBAAC,EAAD,MACA,oC,GARmBK,IAAMC,WCiBdG,E,iLAdb,OACC,yBAAKT,UAAU,sBACd,4BAAQA,UAAU,OACjB,sCAED,kBAAC,EAAD,MACA,oC,GARgBK,IAAMC,WCQXI,E,iLARb,OACC,6BACC,0C,GAJgBL,IAAMC,WCqBXK,E,iLAfX,OACG,kBAAC,IAAD,KACC,6BACI,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWN,EAAMO,OAAK,IACtC,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAWL,IAC5C,kBAAC,IAAD,CAAOI,KAAK,SAASC,UAAWJ,IACxB,kBAAC,IAAD,CAAOI,UAAWH,W,GATZJ,aCGES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.828fe641.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nfunction NavItem(props) {\r\n  return (\r\n\t<div className=\"navbar-item\">\r\n\t\t<NavLink to={\"/\" + props.page}>{props.text}</NavLink>\r\n\t</div>\r\n  );\r\n}\r\n\r\nexport default NavItem;\r\n","import React from 'react';\r\nimport NavItem from '../Menu/NavItem.jsx';\r\n\r\n\r\nclass NavBar extends React.Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<nav className=\"navbar\">\r\n\t\t\t\t<NavItem page=\"\" text=\"Home\"/>\r\n\t\t\t\t<NavItem page=\"projects\" text=\"Projects\"/>\r\n\t\t\t\t<NavItem page=\"about\" text=\"About\"/>\r\n\t\t\t</nav>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport '../bulmaswatch.min.css';\r\nimport '../App.scss';\r\n\r\nimport NavBar from './NavBar.jsx';\r\n\r\n\r\nclass Home extends React.Component{\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"App grid-container\">\r\n\t\t\t\t<header className=\"App-header box\">\r\n\t\t\t\t\t<h1>lolman</h1>\r\n\t\t\t\t</header>\r\n\t\t\t\t<main>\r\n\t\t\r\n\t\t\t\t</main>\r\n\t\t\t\t<NavBar/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport '../bulmaswatch.min.css';\r\nimport '../App.scss';\r\nimport NavBar from './NavBar.jsx';\r\n\r\n\r\nclass Projects extends React.Component{\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"App grid-container\">\r\n\t\t\t\t<header className=\"box\">\r\n\t\t\t\t\t<h1>Projects</h1>\r\n\t\t\t\t</header>\r\n\t\t\t\t<NavBar />\r\n\t\t\t\t<main>\r\n\t\t\r\n\t\t\t\t</main>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Projects;\r\n","import React from 'react';\r\nimport '../bulmaswatch.min.css';\r\nimport '../App.scss';\r\n\r\nimport NavBar from './NavBar.jsx';\r\n\r\n\r\nclass About extends React.Component{\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"App grid-container\">\r\n\t\t\t\t<header className=\"box\">\r\n\t\t\t\t\t<h1>About</h1>\r\n\t\t\t\t</header>\r\n\t\t\t\t<NavBar/>\r\n\t\t\t\t<main>\r\n\t\t\r\n\t\t\t\t</main>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport '../bulmaswatch.min.css';\r\nimport '../App.scss';\r\n\r\n\r\nclass Error extends React.Component{\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>ERROR</h1>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Error;","import './bulmaswatch.min.css';\nimport React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home.jsx';\nimport Projects from './components/Projects.jsx';\nimport About from './components/About.jsx';\nimport Error from './components/Error';\nimport Navigation from './components/Navigation';\n \nclass App extends Component {\n  render() {\n    return (      \n       <BrowserRouter>\n        <div>\n            <Switch>\n             <Route path=\"/\" component={Home} exact/>\n             <Route path=\"/Projects\" component={Projects}/>\n\t\t\t <Route path=\"/About\" component={About}/>\n            <Route component={Error}/>\n           </Switch>\n        </div> \n      </BrowserRouter>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}